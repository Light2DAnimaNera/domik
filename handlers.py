import telebot
import math

from gpt_client import GptClient
from models import (
    add_user_if_not_exists,
    get_all_users,
    set_blocked,
    is_blocked,
    user_exists,
)
from credits import (
    charge_user,
    get_balance,
    get_today_spent,
    get_token_coeff,
    set_token_coeff,
    InsufficientCreditsError,
)
from env import ADMIN_USERNAME
from session_manager import SessionManager
from message_logger import MessageLogger
from summarizer import make_summary
from bot_commands import setup_default_commands
from config import CURRENCY_SYMBOL
client = GptClient()

def register_handlers(bot: telebot.TeleBot) -> None:
    @bot.message_handler(commands=["start"])
    def cmd_start(message: telebot.types.Message) -> None:
        exists = user_exists(message.from_user.id)
        add_user_if_not_exists(message)
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        if exists:
            bot.send_message(
                message.chat.id,
                f"üëã –° –í–û–ó–í–†–ê–©–ï–ù–ò–ï–ú  {message.from_user.first_name}",
                reply_markup=telebot.types.ReplyKeyboardRemove(),
            )
            setup_default_commands(
                bot,
                chat_id=message.chat.id,
                username=message.from_user.username,
            )
            return

        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.row("–î–∞", "–ù–µ—Ç")
        msg = bot.send_message(message.chat.id, "–í–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?", reply_markup=markup)

        def _age_reply(answer: telebot.types.Message) -> None:
            if answer.text.lower().startswith("–¥"):
                set_blocked(answer.from_user.id, False)
                bot.send_message(
                    answer.chat.id,
                    (
                        "üëã –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨\n"
                        "–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–ª–µ–≤–æ–º—É –æ–±—â–µ–Ω–∏—é —Å –Ω–µ–π—Ä–æ-–≥–æ—Å–ø–æ–∂–æ–π DOMINA SUPREMA. –ù–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ–æ 100 üù£.\n"
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞–º 18+.\n"
                        "–ü–µ—Ä–µ–¥–∞—á–∞, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n"
                        "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Å—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
                        "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ ‚Äî /begin\n"
                        "–°–ø—Ä–∞–≤–∫–∞ ‚Äî /help"
                    ),
                    reply_markup=telebot.types.ReplyKeyboardRemove(),
                )
                setup_default_commands(
                    bot,
                    chat_id=answer.chat.id,
                    username=answer.from_user.username,
                )
            else:
                set_blocked(answer.from_user.id, True)
                bot.send_message(answer.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.", reply_markup=telebot.types.ReplyKeyboardRemove())

        bot.register_next_step_handler(msg, _age_reply)

    @bot.message_handler(commands=["help"])
    def cmd_help(message: telebot.types.Message) -> None:
        bot.send_message(
            message.chat.id,
            "‚ÑπÔ∏è –°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/begin ‚Äî –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é\n"
            "/end ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
            "/balance ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "/recharge ‚Äî –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n\n"
            "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ Telegram: @piecode_help",
        )

    @bot.message_handler(commands=["all_users"])
    def cmd_all_users(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        if message.from_user.username != ADMIN_USERNAME:
            return
        users = get_all_users()
        lines = ["üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô"]
        for username, date_joined in users:
            lines.append(f"@{username} ‚Äì {date_joined}")
        bot.send_message(message.chat.id, "\n".join(lines))

    @bot.message_handler(commands=["balance"])
    def cmd_balance(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        bal = get_balance(message.from_user.id)
        spent = get_today_spent(message.from_user.id)
        bal_rounded = math.ceil(bal * 100) / 100
        spent_rounded = math.ceil(spent * 100) / 100
        bot.send_message(
            message.chat.id,
            f"üí∞ –ë–ê–õ–ê–ù–°\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bal_rounded:.2f} {CURRENCY_SYMBOL}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {spent_rounded:.2f} {CURRENCY_SYMBOL}.",
        )

    @bot.message_handler(commands=["recharge"])
    def cmd_recharge(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        parts = message.text.split()
        if len(parts) != 2:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /recharge <amount>")
            return
        try:
            amount = float(parts[1])
            if amount <= 0:
                raise ValueError
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
            return
        try:
            from payment import create_payment_link

            link = create_payment_link(message.from_user.id, amount)
        except Exception:
            bot.send_message(message.chat.id, "–°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {link}")

    @bot.message_handler(commands=["coeff"])
    def cmd_coeff(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        if message.from_user.username != ADMIN_USERNAME:
            return
        coeff = get_token_coeff()
        bot.send_message(message.chat.id, f"‚öôÔ∏è –¢–ï–ö–£–©–ò–ô –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {coeff}.")

    @bot.message_handler(commands=["set_coeff"])
    def cmd_set_coeff(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        if message.from_user.username != ADMIN_USERNAME:
            return
        parts = message.text.split()
        if len(parts) != 2:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ü–ê–†–ê–ú–ï–¢–† –û–¢–°–£–¢–°–¢–í–£–ï–¢\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /set_coeff {—á–∏—Å–ª–æ}.")
            return
        try:
            val = float(parts[1])
            set_token_coeff(val)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–ï–í–ï–†–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /set_coeff {—á–∏—Å–ª–æ}.")
            return
        bot.send_message(message.chat.id, f"‚úÖ –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –û–ë–ù–û–í–õ–Å–ù\n–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {val}.")

    @bot.message_handler(commands=["begin"])
    def cmd_begin(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        if SessionManager.active(message.from_user.id):
            bot.send_message(
                message.chat.id,
                "üõë –°–ï–°–°–ò–Ø –£–ñ–ï –ê–ö–¢–ò–í–ù–ê\n–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /end, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /begin.",
            )
            return

        session_id = SessionManager.start(message.from_user)
        if not session_id:
            bot.send_message(
                message.chat.id,
                "‚ùó –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–ï–°–°–ò–ò\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /begin.",
            )
            return

        bot.send_message(
            message.chat.id,
            "‚ñ∂Ô∏è –°–ï–°–°–ò–Ø –ù–ê–ß–ê–¢–ê\nDOMINA SUPREMA –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é. –ó–∞–≤–µ—Ä—à–∏—Ç—å ‚Äî /end.",
        )

    @bot.message_handler(commands=["end"])
    def cmd_end(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        row = SessionManager.active(message.from_user.id)
        if not row:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–ï–°–°–ò–Ø –ù–ï –ó–ê–ü–£–©–ï–ù–ê\n–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /begin.")
            return
        SessionManager.mark_closing(message.from_user.id)
        summary, full_text = make_summary(row["id"])
        end_time = SessionManager.close(message.from_user.id, summary)
        print(full_text)
        bot.send_message(message.chat.id, "‚úÖ –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê\n–î–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /begin.")

    @bot.message_handler(content_types=["text"])
    def text_handler(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        if message.text.startswith("/"):
            return
        row = SessionManager.active(message.from_user.id)
        if not row:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –°–ï–°–°–ò–Ø –ù–ï –ó–ê–ü–£–©–ï–ù–ê\n–ù–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /begin, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.",
            )
            return
        sid = row["id"]
        MessageLogger.log(sid, "user", message.text)
        context = MessageLogger.context(sid)
        summary = SessionManager.session_summary(sid)
        answer, usage = client.ask(context, message.text, summary)
        try:
            prompt_tokens = usage.get("prompt_tokens", 0)
            completion_tokens = usage.get("completion_tokens", 0)
            charge_user(message.from_user.id, prompt_tokens, completion_tokens)
        except InsufficientCreditsError:
            bot.send_message(message.chat.id, "üõë –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ–π /recharge. –ë–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å—Ö–æ–¥ ‚Äî /balance.")
            return
        MessageLogger.log(sid, "assistant", answer)
        bot.send_message(message.chat.id, answer)

    @bot.message_handler(content_types=[
        "photo",
        "audio",
        "sticker",
        "video",
        "voice",
        "document",
        "animation",
        "contact",
        "location",
        "video_note",
    ])
    def other_content(message: telebot.types.Message) -> None:
        if is_blocked(message.from_user.id):
            bot.send_message(message.chat.id, "[SYSTEM] –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")
            return
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.",
        )
